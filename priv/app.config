[

%%
%% Example of application configuration
{permit, [

   %%
   %% RFC 7519  
   %%   4.1.1.  "iss" (Issuer) Claim
   %% Environment config
   %%   PERMIT_ISSUER=http://example.com
   {issuer, "permit"},

   %%
   %% RFC 7519
   %%   4.1.3.  "aud" (Audience) Claim
   %% Environment config
   %%   PERMIT_AUDIENCE=permit
   {audience, "permit"},

   %%
   %% default list of claims, use url query encoding to specify multiple keys
   %% Environment config
   %%   PERMIT_CLAIMS="read=true&write=true"
   {claims, "uid=true"},

   %%
   %% a provider for RSA public/private key-pair
   %% Available providers
   %%   * permit_config_rsa - on-the-fly RSA key-pair generator 
   %%   * permit_config_ddb - extension of RSA key-pair with AWS DynamoDB persistency
   %%   * permit_config_jwks - use external JWKS endpoint to discover keys
   %% Environment config
   %%   PERMIT_KEYPAIR=permit_config_rsa
   {keypair, permit_config_rsa},

   %%
   %% refresh key pairs every X milliseconds, undefined disables refresh feature
   %% Environment config
   %%   PERMIT_KEYPAIR_TTL=60000
   {keypair_ttl, undefined},

   %%
   %% endpoint to fetch jwks configuration
   %% Environment config
   %%   PERMIT_JWKS=http://localhost:8080/oauth2/jwks
   {jwks, "http://localhost:8080/oauth2/jwks"}

   %%
   %% AWS DynamoDB table for persistency of keypairs
   %% Environment config
   %%   PERMIT_STORAGE=ddb+https://dynamodb.eu-west-1.amazonaws.com:443/pubke
   %% {storage, "ddb+https://dynamodb.eu-west-1.amazonaws.com:443/pubkey"}
]}

].